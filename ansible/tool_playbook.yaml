---
- name: Pull Git Repository, Build and Run Docker Containers for ELK Stack
  hosts: all
  become: yes  # Use this if you need to run commands as root
  vars:
    git_repo: 'https://github.com/CastanheiraOnCode/thesis.git'
    git_dest: '/home/joao-tese/repo'  # Local path to clone the repo
    local_src: '/home/joao/Documents/dev/thesis'
    docker_compose_file: 'automation/docker-compose.yml'  # Path to Docker Compose file inside automation folder
    docker_compose_template: 'automation/docker-compose.yml.j2'  # Path to the template
    elastic_agent_image: "automation_agent"  # Corrected variable name
    elasticsearch_url: "http://localhost:9200"  # Change to https:// if using SSL
    kibana_url: "http://localhost:5601"          # Change to https:// if using SSL

  tasks:
    - name: Ensure git is installed
      apt:
        name: git
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure Docker Compose-v2 is installed
      apt:
        name: docker-compose-v2
        state: present
      when: ansible_os_family == "Debian"

    - name: Clone the Git repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ git_dest }}"
        version: main  # Specify branch or tag if needed
      register: git_clone

    - name: Build and run Docker containers using Docker Compose
      command: docker compose -f "{{ git_dest }}/{{ docker_compose_file }}" up -d
      args:
        chdir: "{{ git_dest }}"  # Run this command in the cloned repo directory

    - name: Wait for Elasticsearch to become available
      wait_for:
        port: 9200
        delay: 10
        timeout: 60

    - name: Delete existing Kibana service token (if it exists)
      command: docker exec -i automation-elasticsearch-1 bin/elasticsearch-service-tokens invalidate elastic/kibana/default
      register: delete_service_token
      ignore_errors: yes  # Ignore errors if the token does not exist

    - name: Generate new service token for Kibana
      command: docker exec -i automation-elasticsearch-1 bin/elasticsearch-service-tokens create elastic/kibana default
      register: kibana_service_token
      ignore_errors: yes  # Ignore errors if the creation fails

    - name: Extract service token from output
      set_fact:
        kibana_service_token_value: "{{ kibana_service_token.stdout | regex_search('elastic/kibana/default=(.*)', '\\1') }}"

    - name: Debug the service token
      debug:
        msg: "Kibana service token: {{ kibana_service_token_value }}"

    - name: Replace the contents of docker-compose.yml with the template
      template:
        src: "{{ local_src }}/{{ docker_compose_template }}"
        dest: "{{ git_dest }}/{{ docker_compose_file }}"
      vars:
        KIBANA_SERVICE_TOKEN: "{{ kibana_service_token_value }}"

    - name: Restart the Docker containers
      command: docker compose -f "{{ git_dest }}/{{ docker_compose_file }}" up -d
      args:
        chdir: "{{ git_dest }}"

    - name: Wait for Kibana to become available
      wait_for:
        port: 5601
        delay: 10
        timeout: 60

    # Build and run Elastic Agent in standalone mode
    - name: Build Elastic Agent Docker image for standalone mode
      command: docker build -t {{ elastic_agent_image }} -f {{ git_dest }}/automation/docker/Dockerfile.elastic-agent {{ git_dest }}/automation/docker

    - name: Start Elastic Agent container in standalone mode
      command: >
        docker run -d --name elastic-agent
        --network automation_default
        -p 8221:8221
        {{ elastic_agent_image }}

    - name: Debug Elastic Agent logs (optional)
      command: docker logs elastic-agent
      register: agent_logs

    - name: Show Elastic Agent logs
      debug:
        msg: "{{ agent_logs.stdout }}"
