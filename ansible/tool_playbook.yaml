---
- name: Pull Git Repository, Build and Run Docker Containers for ELK Stack
  hosts: all
  become: yes  # Use this if you need to run commands as root
  vars:
    git_repo: 'https://github.com/CastanheiraOnCode/thesis.git'
    git_dest: '/home/joao-tese/repo'  # Local path to clone the repo
    local_src: '/home/joao/Documents/dev/thesis'
    docker_compose_file: 'automation/docker-compose.yml'  # Path to Docker Compose file inside automation folder
    elastic_agent_image: "automation_agent"  # Corrected variable name
    elasticsearch_url: "http://localhost:9200"  # Change to https:// if using SSL
    kibana_url: "http://localhost:5601"          # Change to https:// if using SSL
    new_user: "kibana_user"  # New user for Kibana
    new_user_password: "elastic"  # Password for the new user

  tasks:
    - name: Ensure git is installed
      apt:
        name: git
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure Docker Compose-v2 is installed
      apt:
        name: docker-compose-v2
        state: present
      when: ansible_os_family == "Debian"

    - name: Clone the Git repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ git_dest }}"
        version: main  # Specify branch or tag if needed
      register: git_clone

    - name: Build and run Docker containers using Docker Compose
      command: docker compose -f "{{ git_dest }}/{{ docker_compose_file }}" up -d
      args:
        chdir: "{{ git_dest }}"  # Run this command in the cloned repo directory

    - name: Wait for Elasticsearch to become available
      wait_for:
        port: 9200
        delay: 10
        timeout: 60

    - name: Create a new role for the Kibana user
      command: >
        curl -X POST "http://localhost:9200/_security/role/kibana_user_role" 
        -H "Content-Type: application/json"
        -u elastic:elastic 
        -d '{
          "cluster": ["all"],
          "indices": [
            {
              "names": [ "*" ],
              "privileges": ["read", "view_index_metadata", "manage"]
            }
          ]
        }'
      register: create_role

    - name: Create a new user for Kibana
      command: >
        curl -X POST "http://localhost:9200/_security/user/{{ new_user }}" 
        -H "Content-Type: application/json"
        -u elastic:elastic 
        -d '{
          "password": "{{ new_user_password }}",
          "roles": ["kibana_user_role"]
        }'
      register: create_user

    - name: Debug new user creation output
      debug:
        msg: "User created: {{ create_user.stdout }}"

    - name: Replace the Kibana configuration with the new user credentials
      replace:
        path: "{{ git_dest }}/{{ docker_compose_file }}"
        regexp: 'ELASTICSEARCH_USERNAME=.*'
        replace: "      - ELASTICSEARCH_USERNAME={{ new_user }}"
      when: create_user.changed

    - name: Replace the Kibana password
      replace:
        path: "{{ git_dest }}/{{ docker_compose_file }}"
        regexp: 'ELASTICSEARCH_PASSWORD=.*'
        replace: "      - ELASTICSEARCH_PASSWORD={{ new_user_password }}"
      when: create_user.changed

    - name: Restart the Docker containers
      command: docker compose -f "{{ git_dest }}/{{ docker_compose_file }}" up -d
      args:
        chdir: "{{ git_dest }}"

    - name: Wait for Kibana to become available
      wait_for:
        port: 5601
        delay: 10
        timeout: 60

    # Build and run Elastic Agent in standalone mode
    - name: Build Elastic Agent Docker image for standalone mode
      command: docker build -t {{ elastic_agent_image }} -f {{ git_dest }}/automation/docker/Dockerfile.elastic-agent {{ git_dest }}/automation/docker

    - name: Start Elastic Agent container in standalone mode
      command: >
        docker run -d --name elastic-agent
        --network automation_default
        -p 8221:8221
        {{ elastic_agent_image }}

    - name: Debug Elastic Agent logs (optional)
      command: docker logs elastic-agent
      register: agent_logs

    - name: Show Elastic Agent logs
      debug:
        msg: "{{ agent_logs.stdout }}"
