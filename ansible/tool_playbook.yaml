---
- name: Pull Git Repository, Build and Run Docker Containers for ELK Stack
  hosts: all
  become: yes  # Use this if you need to run commands as root
  vars:
    git_repo: 'https://github.com/CastanheiraOnCode/thesis.git'
    git_dest: '/home/joao-tese/repo'  # Local path to clone the repo
    docker_compose_file: 'automation/docker-compose.yml'  # Path to Docker Compose file inside automation folder
    fleet_server_image : "automation_fleet"
    elastic_agent_image: "automation_agent"
    elasticsearch_url: "http://localhost:9200"
    kibana_url: "http://localhost:5601"
    fleet_server_port : 8220
    elastic_agent_port: 8221
    kibana_api_url: "{{ kibana_url }}/api/fleet/agent_policies"
    elastic_username: "elastic"
    elastic_password: "elastic"
    kibana_system_password: "elastic"  # Password for the kibana_system user



  tasks:
    - name: Ensure git is installed
      apt:
        name: git
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure Docker Compose-v2 is installed
      apt:
        name: docker-compose-v2
        state: present
      when: ansible_os_family == "Debian"

    - name: Clone the Git repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ git_dest }}"
        version: main  # Specify branch or tag if needed
      register: git_clone

    - name: Build and run Docker containers using Docker Compose
      command: docker compose -f "{{ git_dest }}/{{ docker_compose_file }}" up -d
      args:
        chdir: "{{ git_dest }}"  # Run this command in the cloned repo directory

    - name: Wait for Elasticsearch to become available
      wait_for:
        port: 9200
        delay: 10
        timeout: 60


    - name: Debug Kibana password configuration response
      debug:
        msg: "Kibana password configuration response: {{ kibana_password_response.json }}"

    - name: Wait for Kibana to become available
      wait_for:
        port: 5601
        delay: 10
        timeout: 60

    # Fleet Server Setup
   
     # Step 1: Create Fleet Server Policy via API
    - name: Create Fleet Server Policy in Kibana
      uri:
        url: "{{ kibana_api_url }}"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
          kbn-xsrf: "true"  # Add kbn-xsrf header
        body: |
          {
            "name": "Fleet Server Policy",
            "namespace": "default",
            "description": "Policy for Fleet Server",
            "is_default_fleet_server": true
          }
        status_code: 200, 409 #409 means the policy already exists
        return_content: yes
      register: fleet_policy_response

    - name: Capture Fleet Server Policy "is_default_fleet_server"
      set_fact:
        fleet_server_policy_id: "{{ fleet_policy_response.json.item.id}}"

    - name: Debug the Fleet Server Policy ID (optional)
      debug:
        msg: "Fleet Server Policy ID: {{ fleet_server_policy_id }}"
